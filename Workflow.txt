STAGE #01: PREPARING THE PROJECT
    01. Server dependencies:
        - npm -D nodemon
        - npm -D concurrently
        - npm install express
        - npm install express-validator
        - npm install mongoose
        - npm install config
        - npm install jsonwebtoken
        - npm install bcryptjs
    02. Client dependencies:
        - npx create-react-app . --template typescript
        - npm react-router-dom
        - npm axios
        - npm redux
        - npm react-redux
        - npm redux-thunk
        - npm redux-devtools-extension
        - npm node-sass@4.14.1
        - npm @types/react-router
        - npm @types/react-router-dom
        - npm @types/axios

STAGE #02: FILE STRUCTURE:
    01. Server side:
        - App.js
        - package.json
        - .gitignore
        + config:
            - default.json
        + models:
            - userModel
        + routes:
            - authRoutes
            - userRoutes

    02. Client side:
        - package.json
        - .gitignore
        + public:
            - index.html
        + src:
            + components:
                - index.ts
                + Header:
                    - Header.tsx
                    - Header.module.scss
                + Footer:
                    - Footer.tsx
                    - Footer.module.scss
                + Auth:
                    - Login.tsx
                    - Register.tsx
                    - Auth.module.scss
                + Statistics:
                    - Statistics.tsx
                    - Statistics.module.scss
                + TasksList:
                    - TasksList.tsx
                    - TasksList.module.scss
                    - Task.tsx
                    - Task.module.scss
                + Profile:
                    - Profile.tsx
                    - Profile.module.scss
                + AddTaskForm:
                    - AddTaskForm.tsx
                    - AddTaskForm.module.scss
            + pages
                - index.ts
                + TasksPage:
                    - TasksPage.tsx
                    - TasksPage.module.scss
            + ui
                - index.ts
                + Input:
                    - Input.tsx
                    - Input.module.scss
                + Button:
                    - Button.tsx
                    - Button.module.scss
                + Select:
                    - Select.tsx
                    - Select.module.scss
                + Notification:
                    - Notification.tsx
                    - Notification.module.scss
                + Modal:
                    - Modal.tsx
                    - Modal.module.scss
            + redux:
                - store.ts
                + actionTypes:
                    - userTypes.ts
                + actionCreators:
                    - userActions.ts
                + reducers:
                    - userReducer.ts
            + types:
                - interfaces.ts
            + scss:
                - variables.scss
                - mixins.scss
            - App.tsx
            - App.module.scss
            - index.tsx

STAGE #03: DATA STRUCTURE:
    01. Server side:
        + endpoints:
            - /api/auth/login
            - /api/auth/register
            - /api/user/edit
            - /api/user/delete

        + userModel:
            firstName: {
                type: String,
                isRequired: true
            }
            lastName: {
                type: String,
                required: true
            }
            age: {
                type: Number,
                required: true
            }
            email: {
                type: String,
                required: true
            }
            password: {
                type: String,
                required: true
            }
            tasks: [
                {
                    title: {
                        type: String
                    }
                    priority: {
                        type: String
                    }
                    isCompleted: {
                        type: Boolean
                    }
                }
            ]
    02. Client side:
        + redux data structure:
            - userReducer's initial state:
                user: {}
                isLogged: Boolean
            - actionTypes:
                'USER/SET_USER'
                'USER/SET_IS_LOGGED'
                'USER/EDIT_USER'
                'USER/DELETE_USER'
                'TASK/ADD_TASK'
                'TASK/EDIT_TASK'
                'TASK/DELETE_TASK'
            - actionCreators:
                setUser
                setIsLogged
                editUser
                deleteUser
                addTask
                editTask
                deleteTask

        + login form data:
            Request data:
                {
                    email: String,
                    password: String
                }

            Response data:
                (status === 201)
                {
                    userId: String (hashed),
                    token: String,
                    firstName: String,
                    lastName: String,
                    age: Number,
                    tasks: [
                        {
                            title: String,
                            priority: String,
                            isCompleted: Boolean
                        }
                    ]
                }

                (status === 400)
                {
                    message: 'Incorrect data' (validation)
                }

                (status === 404)
                {
                    message: 'User not found'
                }

                (status === 500)
                {
                    message: 'Server error'
                }

        + register form data:
            Request data:
                {
                    firstName: String,
                    lastName: String,
                    age: Number,
                    email: String,
                    password: String,
                }

            Response data:
                (status === 201)
                {
                    message: 'User has been successfully created'
                }

                (status === 400)
                {
                    message: 'Incorrect data' (validation)
                }

        + edit form data:
            Request data:
                {
                    userId: String,
                    token: String,
                    firstName: String,
                    lastName: String,
                    age: Number,
                    email: String,
                    tasks: []
                }

            Response data:
                (status === 201)
                {
                    userId: String,
                    token: String,
                    firstName: String,
                    lastName: String,
                    age: Number,
                    email: String,
                    tasks: []
                }

                (status === 400)
                {
                    message: 'Incorrect data' (validation)
                }

                (status === 500)
                {
                    message: 'Server error'
                }

        + delete data:
            Request data:
                {
                    userId: String
                }

            Response data:
                (status === 200)
                {
                    message: 'User has been deleted'
                }

                (status === 400)
                {
                    message: 'Incorrect data'
                }

                (status === 500)
                {
                    message: 'Server error'
                }